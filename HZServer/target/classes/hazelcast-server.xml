<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.8.xsd"
           xmlns="http://www.hazelcast.com/schema/config"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


    <group>
	    <!-- Change this to join this cache to some group. All cache nodes running in a single server installation
		     (i.e. security repository and all solution, content and reporting repositories) must reside in the same group.
			 If the name is left to EDASAE, it is changed automatically on start up to the form EDASAE-Hostname-RandomSuffix.
		-->
        <name>dev</name>
        <password>dev-pass</password>
    </group>
    <management-center enabled="false">http://localhost:8080/mancenter</management-center>
    <network>
        <port auto-increment="true" port-count="100">5701</port>
        <outbound-ports>
            <!--
            Allowed port range when connecting to other nodes.
            0 or * means use system provided port.
            -->
            <ports>0</ports>
        </outbound-ports>
        <join>
		    <!-- By default each server will try to work in isolation. To join it in a distributed
			     server enable either multicast or TCP/IP discovery, preferring the latter. -->
            <multicast enabled="false">
                <multicast-group>224.2.2.3</multicast-group>
                <multicast-port>54327</multicast-port>
            </multicast>
            <tcp-ip enabled="true">
            </tcp-ip>
        </join>
        <interfaces enabled="false">
            <interface>10.10.1.*</interface>
        </interfaces>
        <symmetric-encryption enabled="false">
            <!--
               encryption algorithm such as
               DES/ECB/PKCS5Padding,
               PBEWithMD5AndDES,
               AES/CBC/PKCS5Padding,
               Blowfish,
               DESede
            -->
            <algorithm>PBEWithMD5AndDES</algorithm>
            <!-- salt value to use when generating the secret key -->
            <salt>saltAndPepper</salt>
            <!-- pass phrase to use when generating the secret key -->
            <password>Ver15ecret</password>
            <!-- iteration count to use when generating the secret key -->
            <iteration-count>19</iteration-count>
        </symmetric-encryption>
    </network>
    <executor-service>
        <pool-size>16</pool-size>
        <!--Queue capacity. 0 means Integer.MAX_VALUE.-->
        <queue-capacity>0</queue-capacity>
    </executor-service>
    <map name="default">
        <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>

        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>0</backup-count>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction-policy>NONE</eviction-policy>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size policy="PER_NODE">0</max-size>
        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>
    </map>

	<!-- Map with no backup used for the context info being cached -->
    <map name="BPS-CONTEXT-*">

            <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>
		<!--
            Number of backups. If 1 is set as the backup-count for example, then all entries of
            the map will be copied to another JVM for fail-safety. 0 means no backup.
        -->
		<backup-count>0</backup-count>

        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            LFU is the BPS default.
        -->
		<eviction-policy>LFU</eviction-policy>

        <!--
        	Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. BPS default is 5000.

			NOTE: For performance purposes, BPS factory default is set at 5000.
            This is to release system resources if an entry idles longer than 83 minutes.
            Do not set to zero in production systems.
        -->
        <max-idle-seconds>5000</max-idle-seconds>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. BPS default is 300.
        -->
        <max-size policy="PER_NODE">300</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>

    </map>

        <!-- Map with no backup used for tactical parameters service performance -->
    <map name="TACTICAL-CACHE-*">
              <!--
              Data type that will be used for storing recordMap.
              Possible values:
              BINARY (default): keys and values will be stored as binary data
              OBJECT : values will be stored in their object forms
              OFFHEAP : values will be stored in non-heap region of JVM
               -->
               <in-memory-format>BINARY</in-memory-format>

		<!--
            Number of backups. If 1 is set as the backup-count for example, then all entries of
            the map will be copied to another JVM for fail-safety. 0 means no backup.
        -->
		<backup-count>0</backup-count>

        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            LFU is the BPS default.
        -->
		<eviction-policy>LFU</eviction-policy>

        <!--
        	Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. BPS default is 5000.

			NOTE: for best performance the entries should not live that the session expire time.
        -->
        <max-idle-seconds>5000</max-idle-seconds>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. BPS default is 300.
        -->
        <max-size policy="PER_NODE">300</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>

    </map>

    <map name="ENRICHMENT-CACHE-*">
            <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>

        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. Valid numbers are 0 (no backup), 1, 2, 3.
        -->
        <backup-count>0</backup-count>

        <!--
            Maximum number of seconds for each entry to stay idle in the map. Entries that are
            idle(not touched) for more than <max-idle-seconds> will get
            automatically evicted from the map.
            Entry is touched if get, put or containsKey is called.
            Any integer between 0 and Integer.MAX_VALUE.
            0 means infinite. BPS default is 600.
        -->
        <max-idle-seconds>600</max-idle-seconds>

        <!--
            Valid values are:
            NONE (no extra eviction, <time-to-live-seconds> may still apply),
            LRU  (Least Recently Used),
            LFU  (Least Frequently Used).
            LRU is the BPS default.
            Regardless of the eviction policy used, <time-to-live-seconds> will still apply.
        -->
        <eviction-policy>LRU</eviction-policy>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. BPS default is 5000.
        -->
        <max-size policy="PER_NODE">5000</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>

    </map>

    <map name="BPS-SESSION-*">

            <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>
		<!--
            Number of backups. If 1 is set as the backup-count for example, then all entries of
            the map will be copied to another JVM for fail-safety. 0 means no backup.
        -->
		<backup-count>0</backup-count>

        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
		<eviction-policy>NONE</eviction-policy>

        <!--
        	Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. BPS default is 3600.

			NOTE: for best performance the entries should not live that the session expire time.
        -->
        <max-idle-seconds>3600</max-idle-seconds>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. BPS default is 300.
        -->
        <max-size policy="PER_NODE">300</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>

    </map>

    <map name="BPS-SESSION-COUNTERS-*">

            <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           OFFHEAP : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>
		<!--
            Number of backups. If 1 is set as the backup-count for example, then all entries of
            the map will be copied to another JVM for fail-safety. 0 means no backup.
        -->
		<backup-count>0</backup-count>

        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
		<eviction-policy>NONE</eviction-policy>

        <!--
        	Maximum number of seconds for each entry to stay idle in the map. Entries that are
			idle(not touched) for more than <max-idle-seconds> will get
			automatically evicted from the map. Entry is touched if get, put or containsKey is called.
			Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.

			NOTE: for best performance the entries should not live that the session expire time.
        -->
        <max-idle-seconds>0</max-idle-seconds>

        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. BPS default is 300.
        -->
        <max-size policy="PER_NODE">300</max-size>

        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <eviction-percentage>25</eviction-percentage>
    </map>
</hazelcast>